// Generated by CoffeeScript 1.6.3
(function() {
  var crypto, generateSalt, md5, moment, saltAndHash, schema, user, validatePassword;

  crypto = require('crypto');

  moment = require('moment');

  user = require('./schema').user;

  schema = require('./schema');

  exports.autoLogin = function(username, password, callback) {
    return user.findOne({
      username: username
    }, function(e, o) {
      var _ref;
      if (o) {
        return (_ref = o.password === password) != null ? _ref : callback({
          o: callback(null)
        });
      } else {
        return callback(null);
      }
    });
  };

  exports.manualLogin = function(username, password, callback) {
    return user.findOne({
      username: username
    }, function(e, o) {
      if ((o == null) || e) {
        return callback("User Error " + e);
      } else {
        return validatePassword(password, o.password, function(err, res) {
          if (res) {
            return callback(null, o);
          } else {
            return callback('Invalid Password');
          }
        });
      }
    });
  };

  exports.newAccount = function(newData, callback) {
    return accounts.findOne({
      username: newData.username
    }, function(err, object) {
      if (object) {
        return callback('username taken');
      } else {
        return accounts.findOne({
          name: newData.name
        }, function(err, object) {
          if (object) {
            return callback('name taken');
          } else {
            return saltAndHash(newData.password(function(hash) {
              var newUser;
              newData.password = hash;
              newData.date = moment().format('MMMM Do YYYY, hh:mm:ss a');
              return newUser = new user();
            }));
          }
        });
      }
    });
  };

  generateSalt = function() {
    var i, p, salt, set, _i;
    set = '0123456789abcdefghijklmnopqurstuvwxyzABCDEFGHIJKLMNOPQURSTUVWXYZ';
    salt = '';
    for (i = _i = 0; _i <= 10; i = _i += 1) {
      p = Math.floor(Math.random() * set.length);
      salt += set[p];
    }
    return salt;
  };

  md5 = function(str) {
    return crypto.createHash('md5').update(str).digest('hex');
  };

  saltAndHash = function(password, callback) {
    var salt;
    salt = generateSalt();
    return callback(salt + md5(password + salt));
  };

  validatePassword = function(plainPass, hashedPass, callback) {
    var salt, validHash;
    salt = hashedPass.substr(0, 10);
    validHash = salt + md5(plainPass + salt);
    return callback(null, hashedPass === validHash);
  };

}).call(this);
