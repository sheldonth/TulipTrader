// Generated by CoffeeScript 1.6.3
(function() {
  var MongoClient, Server, crypto, dbIP, dbPass, dbPort, dbString, dbUser, generateSalt, md5, moment, mongoose, saltAndHash, schema, validatePassword, _ref;

  crypto = require('crypto');

  moment = require('moment');

  _ref = require('mongodb'), MongoClient = _ref.MongoClient, Server = _ref.Server;

  mongoose = require('mongoose');

  dbUser = 'admin';

  dbPass = 'alphaalphafoxtrot';

  dbIP = '142.4.197.18';

  dbPort = '27017';

  dbString = "mongodb://" + dbUser + ":" + dbPass + "@" + dbIP + ":" + dbPort + "/";

  schema = require('./schema');

  mongoose.connect(dbString, function(err, res) {
    if (err) {
      return console.log('MongoDb Connection Error');
    } else {
      return console.log('MongoDb Connection Successful');
    }
  });

  exports.autoLogin = function(username, password, callback) {
    console.log("user is " + user);
    return user.findOne({
      username: username
    }, function(e, o) {
      var _ref1;
      if (o) {
        return (_ref1 = o.password === password) != null ? _ref1 : callback({
          o: callback(null)
        });
      } else {
        return callback(null);
      }
    });
  };

  exports.manualLogin = function(username, password, callback) {
    return user.findOne({
      username: username
    }, function(e, o) {
      if (o === null) {
        return callback('user-not-found');
      } else {
        return validatePassword(password, o.password, function(err, res) {
          if (res) {
            return callback(null, o);
          } else {
            return callback('invalid-password');
          }
        });
      }
    });
  };

  exports.newAccount = function(newData, callback) {
    return accounts.findOne({
      username: newData.username
    }, function(err, object) {
      if (object) {
        return callback('username taken');
      } else {
        return accounts.findOne({
          name: newData.name
        }, function(err, object) {
          if (object) {
            return callback('name taken');
          } else {
            return saltAndHash(newData.password(function(hash) {
              newData.password = hash;
              newData.date = moment().format('MMMM Do YYYY, h:mm:ss a');
              return console.log("Inserting New User: " + newData);
            }));
          }
        });
      }
    });
  };

  generateSalt = function() {
    var i, p, salt, set, _i;
    set = '0123456789abcdefghijklmnopqurstuvwxyzABCDEFGHIJKLMNOPQURSTUVWXYZ';
    salt = '';
    for (i = _i = 0; _i <= 10; i = _i += 1) {
      p = Math.floor(Math.random() * set.length);
      salt += set[p];
    }
    return salt;
  };

  md5 = function(str) {
    return crypto.createHash('md5').update(str).digest('hex');
  };

  saltAndHash = function(password, callback) {
    var salt;
    salt = generateSalt();
    return callback(salt + md5(password + salt));
  };

  validatePassword = function(plainPass, hashedPass, callback) {
    var salt, validHash;
    salt = hashedPass.substr(0, 10);
    validHash = salt + md5(plainPass + salt);
    return callback(null, hashedPass === validHash);
  };

}).call(this);
